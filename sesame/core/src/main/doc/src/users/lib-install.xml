<chapter id="chapter-lib-install">
	<title>Setting up to use the Sesame libraries</title>
	<para>
		In this chapter, we explain some basics about setting up your
		application development environment to work with Sesame. In <xref
			linkend="chapter-repository-api"/> we go into details of the use
		of the APIs. If you do not want to program against the Sesame
		libraries but just want to install and run the Sesame HTTP server,
		please skip ahead to <xref linkend="chapter-server-install"/>.
	</para>

	<section> 
		<title>Downloading the libraries</title>
		<para>
			As was explained in <xref linkend="chapter-download"/>, various
			download options are available to you. The quickest way to get
			started with using the Sesame libraries is to download the Sesame
			<emphasis>onejar</emphasis> library and include it in your classpath. 	
		</para>
		<para>
			However, it is important to note that the Sesame Framework consists
			of a set of libraries: Sesame is not a monolithic piece of software,
			you can pick and choose which parts you want and which ones you
			don't. In those cases where you don't care about picking and
			choosing and just want to get on with it, the onejar is a good
			choice. If, however, you want a little more control over what is
			included, you can download the complete SDK and select (from the
			<filename>lib</filename> directory) those sesame libraries that you
			require.
		</para>
		<para>
			An alternative to picking libraries by hand is to use maven. <ulink
			href="http://maven.apache.org/">Apache Maven</ulink> is a software
			management tool that helps you by offering things like library
			version management and dependency management (which is very useful
			because it means that once you decide you need a particular Sesame
			library, maven automatically downloads all the libraries that your
			library of choice requires in turn), and giving you a handy-dandy
			build environment. For details on how to start using maven, we
			advise you to take a look at the Apache Maven website at
			<ulink url="http://maven.apache.org/"/>.
		</para>
	</section>

	<section>
		<title>Logging: SLF4J initialization</title>
		<para>
			Before you begin using the Sesame libraries, one important
			configuration step needs to be taken: the initialization and
			configuration of a logging framework.
		</para>
		<para>
			Sesame uses the <ulink url="http://www.slf4j.org/">Simple Logging
				Facade for Java (SLF4J)</ulink>, which is a framework for
			abstracting from the actual logging implementation. SLF4J allows
			you, as a user of the Sesame framework, to plug in your own favorite
			logging implementation at deployment time. SLF4J supports the most
			popular logging implementations such as Java Logging, Apache Commons
			Logging, log4j, etc. See the SLF4J website for more info.
		</para>
		<para>
			What you need to do is to determine/decide which logging implementation
			you (are going to) use and include the appropriate SLF4J-bridge jar-file
			in your classpath. For example, if you decide to use
			<ulink url="http://logging.apache.org/log4j/">Apache log4j 1.2</ulink>,
			you need to include the SLF4J-to-log4j bridge in your classpath. The
			SLF4J release packages include bridges to various logging implementations;
			just download the SLF4J release package (Sesame currently uses 1.4.3) and
			include the appropriate bridge in your classpath;
			<filename>slf4j-log4j12-1.4.3.jar</filename>, for example. That's all!
		</para>
	</section>
</chapter>
