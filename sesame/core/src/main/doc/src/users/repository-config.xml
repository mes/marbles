<section id="section-repository-config">
	<section>
		<title>Memory store configuration</title>
		<para>
			A memory store is an RDF repository that stores its data in main
			memory. Apart from the standard <parameter>ID</parameter> and
			<parameter>title</parameter> parameters, this type of repository
			has a <parameter>Persist</parameter> and
			<parameter>Sync delay</parameter> parameter.
		</para>

		<section>
			<title>Memory Store persistence</title>
			<para>
				The <parameter>Persist</parameter> parameter controls
				whether the memory store will use a data file for
				persistence over sessions. Persistent memory stores write
				their data to disk before being shut down and read this data
				back in the next time they are initialized. Non-persistent
				memory stores are always empty upon initialization.
			</para>
		</section>

		<section>
			<title>Synchronization delay</title>
			<para>
				By default, the memory store persistence mechanism synchronizes
				the disk backup directly upon any change to the contents of the
				store. That means that directly after an update operation (upload,
				removal) completes, the disk backup is updated. It is possible
				to configure a synchronization delay however. This can be useful
				if your application performs several transactions in sequence and
				you want to prevent disk synchronization in the middle of this
				sequence to improve update performance.
			</para>
			<para>
				The synchronization delay is specified by a number, indicating
				the time in milliseconds that the store will wait before it
				synchronizes changes to disk. The value 0 indicates that there
				should be no delay. Negative values can be used to postpone the
				synchronization indefinitely, i.e. until the store is shut down.
			</para>
		</section>
	</section> <!-- memory store configuration -->

	<section id="section-native-store-config">
		<title>Native store configuration</title>
		<para>
			A native store stores and retrieves its data directly to/from
			disk. The advantage of this over the memory store is that it
			scales much better as it isn't limited to the size of available
			memory. Of course, since it has to access the disk, it is also
			slower than the in-memory store, but it is a good solution for
			larger data sets.
		</para>

		<section>
			<title>Native store indexes</title>  
			<para>
				The native store uses on-disk <emphasis>indexes</emphasis>
				to speed up querying. It uses B-Trees for indexing
				statements, where the index key consists of four fields:
				subject (s), predicate (p), object (o) and context (c). The
				order in which each of these fields is used in the key
				determines the usability of an index on a specify statement
				query pattern: searching statements with a specific subject
				in an index that has the subject as the first field is
				signifantly faster than searching these same statements in an
				index where the subject field is second or third. In the worst
				case, the 'wrong' statement pattern will result in a sequential
				scan over the entire set of statements.
			</para>
			<para>
				By default, the native repository only uses two indexes, one
				with a subject-predicate-object-context (spoc) key pattern
				and one with a predicate-object-subject-context (posc) key
				pattern.  However, it is possible to define more or other
				indexes for the native repository, using the
				<parameter>Triple indexes</parameter> parameter. This can be
				used to optimize performance for query patterns that occur
				frequently.
			</para>
			<para>
				The subject, predicate, object and context fields are
				represented by the characters 's', 'p', 'o' and 'c'
				respectively. Indexes can be specified by creating 4-letter
				words from these four characters. Multiple indexes can be
				specified by separating these words with commas, spaces
				and/or tabs. For example, the string "spoc, posc" specifies
				two indexes; a subject-predicate-object-context index and a
				predicate-object-subject-context index.
			</para>
			<para>
				Creating more indexes potentially speeds up querying (a
				lot), but also adds overhead for maintaining the indexes.
				Also, every added index takes up additional disk space.
			</para>
			<para>
				The native store automatically creates/drops indexes upon
				(re)initialization, so the parameter can be adjusted and
				upon the first refresh of the configuration the native store
				will change its indexing strategy, without loss of data.
			</para>
		</section>
	</section> <!-- native repository configuration -->


	<section>
		<title>HTTP repository configuration</title>
		<para>
			An HTTP repository isn't an actual store, but serves as a proxy for
			a store on a (remote) Sesame server.

			A memory store is an RDF repository that stores its data in main
			memory. Apart from the standard <parameter>ID</parameter> and
			<parameter>title</parameter> parameters, this type of repository
			has a <parameter>Persist</parameter> and
			<parameter>Sync delay</parameter> parameter.
		</para>

		<section>
			<title>Memory Store persistence</title>
			<para>
				The <parameter>Persist</parameter> parameter controls
				whether the memory store will use a data file for
				persistence over sessions. Persistent memory stores write
				their data to disk before being shut down and read this data
				back in the next time they are initialized. Non-persistent
				memory stores are always empty upon initialization.
			</para>
		</section>

		<section>
			<title>Synchronization delay</title>
			<para>
				By default, the memory store persistence mechanism synchronizes
				the disk backup directly upon any change to the contents of the
				store. That means that directly after an update operation (upload,
				removal) completes, the disk backup is updated. It is possible
				to configure a synchronization delay however. This can be useful
				if your application performs several transactions in sequence and
				you want to prevent disk synchronization in the middle of this
				sequence to improve update performance.
			</para>
			<para>
				The synchronization delay is specified by a number, indicating
				the time in milliseconds that the store will wait before it
				synchronizes changes to disk. The value 0 indicates that there
				should be no delay. Negative values can be used to postpone the
				synchronization indefinitely, i.e. until the store is shut down.
			</para>
		</section>
	</section> <!-- HTTP repository configuration -->

</section>
